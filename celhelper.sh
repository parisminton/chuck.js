#!/bin/bash

# > celhelper.sh <
# Converts the code generated by Mike Swanson's Ai->Canvas Export Plug-In 
# for Illustrator into an expression that stores the draw() function
# in a custom JavaScript array member.

# Storing these vector drawing instructions in an array gives me options
# for calling them sequentially in an animation.

# Learn more about the Ai->Canvas Export Plug-In at 
# http://visitmix.com/labs/ai2canvas.

# Written by parisminton for Concrete Daydreams.
# <parisminton [at] da.ydrea.ms>

#vrs="v 0.3"
#last_change="12/8/11"

fileindex=0
args=($*)

# ...store arguments in a comma-separated string so we can declare our variables at the top of the function...
for ((i=0; i<${#args[*]}; i++ )); do
  if [ "$arg_list_string" ]; then
    arg_list_string=$(echo $arg_list_string | sed -n 's/\([a-zA-Z0-9_\-][a-zA-Z0-9_ \-\,]*\);$/\1, '"${args[$i]}"';/p')
  else
    arg_list_string="$1;"
  fi
done

echo "function loadCharacters () {
  var $arg_list_string
  " >> cels.js

for ((j=0; j<${#args[*]}; j++)); do

  arg_total=$(echo "${args[$j]}"* | wc -w)

  echo "  ${args[$j]} = new Character(\"${args[$j]}\", false);
  ${args[$j]}.show();
  ${args[$j]}.sequence.main.cels = [" >> cels.js

   for file in ${args[$j]}*.html; do
    # ... isolate the number in the filename. we'll use it to test if this is the last file of the sequence ...
    sequence=$(echo "$file" | sed -n 's/^[a-zA-Z_.][a-zA-Z0-9.\-]*_\([0-9][0-9]*\)\.html$/\1/p')

    if [ "$sequence" -eq $(($arg_total - 1)) ]; then
      sed '
          /function '"${args[$j]}"'/, /}$/ !d
            s/      \/\//        \/\//
            s/ [a-zA-Z0-9]*(ctx) {$/ () {\
      if \('"${args[$j]}"'.visible\) {/
            s/ctx\./  ctx\./
            s/ctx.lineWidth = \([0-9][0-9\.]*\);/'"${args[$j]}"'.lineWidth(\1);/
            s/ctx.lineJoin = \("[a-z][a-z]*"\);/'"${args[$j]}"'.lineJoin(\1);/
            s/ctx.miterLimit = \([0-9][0-9\.]*\);/'"${args[$j]}"'.miterLimit(\1);/
            s/addColorStop(\([0-9][0-9\.]*, [a-z"][a-zA-Z0-9 #(),"]*\));/addColorStop(gradient, \1);/
            s/ctx.fillStyle = \([a-z"][a-zA-Z0-9 #(),"]*\);/'"${args[$j]}"'.fillStyle(\1);/
            s/ctx.strokeStyle = \([a-z"][a-zA-Z0-9 #(),"]*\);/'"${args[$j]}"'.strokeStyle(\1);/
            s/ctx/'"${args[$j]}"'/
          s/}$/  }\
    }\
  ];\
/
          ' < $file >> cels.js


    else
      sed '
          /function '"${args[$j]}"'/, /}$/ !d
            s/      \/\//        \/\//
            s/ [a-zA-Z0-9]*(ctx) {$/ () {\
      if \('"${args[$j]}"'.visible\) {/
            s/ctx\./  ctx\./
            s/ctx.lineWidth = \([0-9][0-9\.]*\);/'"${args[$j]}"'.lineWidth(\1);/
            s/ctx.lineJoin = \("[a-z][a-z]*"\);/'"${args[$j]}"'.lineJoin(\1);/
            s/ctx.miterLimit = \([0-9][0-9\.]*\);/'"${args[$j]}"'.miterLimit(\1);/
            s/addColorStop(\([0-9][0-9\.]*, [a-z"][a-zA-Z0-9 #(),"]*\));/addColorStop(gradient, \1);/
            s/ctx.fillStyle = \([a-z"][a-zA-Z0-9 #(),"]*\);/'"${args[$j]}"'.fillStyle(\1);/
            s/ctx.strokeStyle = \([a-z"][a-zA-Z0-9 #(),"]*\);/'"${args[$j]}"'.strokeStyle(\1);/
            s/ctx/'"${args[$j]}"'/
            s/}$/  }\
    },\
/
          ' < $file >> cels.js
    fi

  done

done

for ((l=0; l<${#args[*]}; l++ )); do
  echo "  ${args[$l]}.load();" >> cels.js
done

echo "
};" >> cels.js
